@using Document_Management.Models.Enums
@model Document_Management.Models.Register

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit User</h1>

<h4>Employee</h4>
<hr />
<div class="row">
    <div class="col">
        <form asp-action="Edit" method="post" class="needs-validation">
            @Html.AntiForgeryToken()
            <div class="mb-3">
                <label asp-for="EmployeeNumber" class="form-label"></label>
                <input asp-for="EmployeeNumber" class="form-control" />
                <span asp-validation-for="EmployeeNumber" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label asp-for="FirstName" class="form-label"></label>
                <input asp-for="FirstName" class="form-control" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label asp-for="LastName" class="form-label"></label>
                <input asp-for="LastName" class="form-control" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label asp-for="Department" class="form-label"></label>
                @Html.DropDownListFor(m => m.Department,
                new SelectList(Enum.GetValues(typeof(Departments))),
                new { @class = "form-control" })
                <span asp-validation-for="Department" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label class="form-label">Access Folders:</label>
                @foreach (var department in Enum.GetNames(typeof(Departments)))
                {
                    <div>
                        <input type="checkbox" name="AccessFolders" value="@department" @(Model.AccessFolders.Contains(department) ? "checked" : "") /> @department
                    </div>
                }
            </div>
            <div class="mb-3">
                <label class="form-label">Module Access:</label>
                @foreach (var modules in new List<string> { "DMS", "Gatepass" })
                {
                    <div>
                        <input type="checkbox" name="ModuleAccess" value="@modules" @(Model.ModuleAccess.Contains(modules) ? "checked" : "") /> @modules
                    </div>
                }
            </div>
            <div class="mb-3">
                <label asp-for="Username" class="form-label"></label>
                <input asp-for="Username" class="form-control" />
                <span asp-validation-for="Username" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label asp-for="Password" class="form-label"></label>
                <input name="newPassword" type="password" class="form-control" placeholder="••••••••" />
                @* <span asp-validation-for="Password" class="text-danger"></span> *@
            </div>
            <div class="mb-3">
                <label asp-for="ConfirmPassword" class="form-label"></label>
                <input name="newConfirmPassword" type="password" class="form-control" placeholder="••••••••" />
                @* <span asp-validation-for="ConfirmPassword" class="text-danger"></span> *@
            </div>
            <div class="mb-3">
                <label asp-for="Role" class="form-label"></label>
                @Html.DropDownListFor(m => m.Role,
                new SelectList(Enum.GetValues(typeof(Roles))),
                new { @class = "form-control" })
                <span asp-validation-for="Role" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <input type="submit" value="Update" class="btn btn-outline-success rounded" />
                <a asp-action="Index" class="btn btn-outline-primary rounded">Back to List</a>
            </div>
        </form>
    </div>
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
