@using Document_Management.Models.Enums
@using System.ComponentModel.DataAnnotations;
@model Document_Management.Models.FileDocument;

@{
    ViewData["Title"] = "Upload";
}

<partial name="_Notification" />

<h1>Upload File</h1>
<hr />

<div class="container mt-3">
    <form asp-action="UploadFile" method="post" enctype="multipart/form-data">
        @Html.AntiForgeryToken()
        <div asp-validation-summary="ModelOnly" class="text-danger"></div> 
        <div class="mb-3">
            <label asp-for="Name" class="control-label"></label>
            <div class="col">
                <input id ="fileInput" name="file" type="file" class="form-control w-" accept=".pdf" style="width:110px" />
                <span asp-validation-for="Name" class="text-danger"></span>
                <small class="text-muted">Maximum file size allowed: 5MB</small>
            </div>
        </div>     

        <!-- Add a hidden field to store the selected file name -->
        <input type="hidden" asp-for="OriginalFilename" />

        <!-- Add the following span element to display the selected file name -->
        <div class="mb-3">
            <label class="control-label">File Name:</label>
            <span id="selectedFileName" class="text-muted">No file selected</span>
        </div>

        <div class="mb-3">
            <label asp-for="Company" class="control-label"></label>
            <div class="col">
                <select asp-for="Company" class="form-select" id="companyDropdown">
                    <option value="" selected disabled>-- Select the company --</option>
                    @foreach (var company in Enum.GetValues(typeof(Companies)))
                    {
                        var enumMember = typeof(Companies).GetMember(company.ToString())[0];
                        var displayAttribute = enumMember.GetCustomAttributes(typeof(DisplayAttribute), false).FirstOrDefault() as DisplayAttribute;

                        string displayName = displayAttribute != null ? displayAttribute.Name : company.ToString();

                        <option value="@company">@displayName</option>
                    }
                </select>
                <span asp-validation-for="Company" class="text-danger"></span>
            </div>
        </div>


        <div class="mb-3">
            <label asp-for="Year" class="control-label"></label>
            <div class="col">
                <select asp-for="Year" id="yearDropdown" class="form-select" ></select>
                <span asp-validation-for="Year" class="text-danger"></span>
            </div>
        </div>

        <div class="mb-3">
            <label asp-for="Department" class="control-label"></label>
            <div class="col">
                <select asp-for="Department" class="form-select" id="departmentDropdown">
                    <option value="" selected disabled>-- Select the department --</option>
                    @foreach (var department in Enum.GetValues(typeof(Departments)))
                    {
                        var enumMember = typeof(Departments).GetMember(department.ToString())[0];
                        var displayAttribute = enumMember.GetCustomAttributes(typeof(DisplayAttribute), false).FirstOrDefault() as DisplayAttribute;

                        string displayName = displayAttribute != null ? displayAttribute.Name : department.ToString();

                        <option value="@department">@displayName</option>
                    }
                </select>
                <span asp-validation-for="Department" class="text-danger"></span>
            </div>
        </div>

        <div class="mb-3">
            <label asp-for="Category" class="control-label"></label>
            <div class="col">
                <select asp-for="Category" class="form-select" id="categoryDropdown">
                    <option value="" selected disabled>-- Select the category --</option>
                    @foreach (var category in Enum.GetValues(typeof(Categories)))
                    {
                        var enumMember = typeof(Categories).GetMember(category.ToString())[0];
                        var displayAttribute = enumMember.GetCustomAttributes(typeof(DisplayAttribute), false).FirstOrDefault() as DisplayAttribute;

                        string displayName = displayAttribute != null ? displayAttribute.Name : category.ToString();

                        <option value="@category">@displayName</option>
                    }
                </select>
                <span asp-validation-for="Category" class="text-danger"></span>
            </div>
        </div>
        
        <!--Delivery Documents Sub Category Dropdown-->
        <div class="mb-3" id="deliverySubCategories" style="display: none;">
            <label asp-for="SubCategory" class="control-label"></label>
            <div class="col">
                <select asp-for="SubCategory" class="form-select" id="deliveryDropdown">
                    <option value="" selected disabled>-- Select the sub category --</option>
                    @foreach (var delivery in Enum.GetValues(typeof(DeliverySubCategories)))
                    {
                        var enumMember = typeof(DeliverySubCategories).GetMember(delivery.ToString())[0];
                        var displayAttribute = enumMember.GetCustomAttributes(typeof(DisplayAttribute), false).FirstOrDefault() as DisplayAttribute;

                        string displayName = displayAttribute != null ? displayAttribute.Name : delivery.ToString();

                        <option value="@delivery">@displayName</option>
                    }
                </select>
                <span asp-validation-for="SubCategory" class="text-danger"></span>
            </div>
        </div>

        <!--Government Agency Documents Sub Category Dropdown-->
        <div class="mb-3" id="governmentSubCategories" style="display: none;">
            <label asp-for="SubCategory" class="control-label"></label>
            <div class="col">
                <select asp-for="SubCategory" class="form-select" id="governmentDropdown">
                    <option value="" selected disabled>-- Select the sub category --</option>
                    @foreach (var government in Enum.GetValues(typeof(GovernmentSubCategories)))
                    {
                        var enumMember = typeof(GovernmentSubCategories).GetMember(government.ToString())[0];
                        var displayAttribute = enumMember.GetCustomAttributes(typeof(DisplayAttribute), false).FirstOrDefault() as DisplayAttribute;

                        string displayName = displayAttribute != null ? displayAttribute.Name : government.ToString();

                        <option value="@government">@displayName</option>
                    }
                </select>
                <span asp-validation-for="SubCategory" class="text-danger"></span>
            </div>
        </div>

        <div class="mb-3">
            <label asp-for="NumberOfPages" class="form-label"></label>
            <input asp-for="NumberOfPages" class="form-control" id="numberOfPagesInput" />
            <span asp-validation-for="NumberOfPages" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label class="form-label">Description (Tags)</label>
            <div class="col">
                <textarea asp-for="Description" class="form-control" rows="5" placeholder="Enter some words or keywords that will help us find the file later."></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
        </div>

        <button id="uploadButton" type="submit" class="btn btn-primary" disabled>Upload</button>
    </form>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener("DOMContentLoaded", function () {
        const fileInput = document.querySelector('#fileInput'); // Target the file input by its id
        const form = document.querySelector('form');
        const selectedFileNameSpan = document.getElementById('selectedFileName');
        const hiddenFileNameInput = document.querySelector('input[type="hidden"][name="OriginalFilename"]');
        const uploadButton = document.getElementById('uploadButton'); // Target the "Upload" button by its id

        // Function to update the selected file name
        function updateSelectedFileName() {
            if (fileInput.files.length > 0) {
                const fileName = fileInput.files[0].name;
                console.log(fileName);
                selectedFileNameSpan.textContent = fileName;
                hiddenFileNameInput.value = fileName; // Update the hidden input's value
                uploadButton.removeAttribute('disabled'); // Enable the "Upload" button
            } else {
                // If no file is selected, retain the previous file name
                selectedFileNameSpan.textContent = hiddenFileNameInput.value || 'No file selected';
                uploadButton.setAttribute('disabled', 'disabled'); // Disable the "Upload" button
            }
        }

        // Call the updateSelectedFileName function on page load
        updateSelectedFileName();

        fileInput.addEventListener('change', function () {
            updateSelectedFileName();
        });

        form.addEventListener("submit", function (event) {
            const maxFileSize = 5 * 1024 * 1024; // 5MB in bytes

            if (fileInput.files.length > 0) {
                const fileSize = fileInput.files[0].size;

                if (fileSize > maxFileSize) {
                    event.preventDefault();
                    Swal.fire(
                        'Oops',
                        'File size exceeds the maximum limit of 5MB!',
                        'error'
                    );
                }
            }
        });
    });
    </script>

    <script>
        var dropdown = document.getElementById('yearDropdown');
        var currentYear = new Date().getFullYear();
        var yearsInPast = 10; // Number of years in the past
        var yearsInFuture = 10; // Number of years in the future

        // Populate the dropdown with years
        for (var i = currentYear - yearsInPast; i <= currentYear + yearsInFuture; i++) {
            var option = document.createElement('option');
            option.value = i;
            option.text = i;

            if (i === currentYear) {
                option.setAttribute('selected', 'selected'); // Set the current year as the default
            }

            dropdown.appendChild(option);
        }
    </script>

    <script>
        $(document).ready(function () {
            $('#categoryDropdown').change(function () {
                console.log($(this).val());
                if ($(this).val() == 'Delivery_Documents') {
                    $('#deliverySubCategories').show();
                } else {
                    $('#deliverySubCategories').hide();
                }

                if ($(this).val() == 'Government_Agency_Documents') {
                    $('#governmentSubCategories').show();
                } else {
                    $('#governmentSubCategories').hide();
                }

            });       
        });
    </script>

}

